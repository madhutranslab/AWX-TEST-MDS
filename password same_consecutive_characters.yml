---
- name: Enforce maxrepeat = 3 for password complexity
  hosts: all
  become: yes
  vars:
    pwquality_main: "/etc/security/pwquality.conf"
    pwquality_custom: "/etc/security/pwquality.conf.d/50-pwrepeat.conf"
    timestamp: "{{ lookup('pipe', 'date +%F_%H-%M-%S') }}"
    backup_file: "{{ pwquality_main }}.bak_{{ timestamp }}"
    pam_files:
      - system-auth
      - password-auth

  tasks:
    - name: Backup pwquality.conf with timestamp
      copy:
        src: "{{ pwquality_main }}"
        dest: "{{ backup_file }}"
        remote_src: yes
        mode: '0644'

    - name: Comment out existing 'maxrepeat' lines in pwquality.conf
      replace:
        path: "{{ pwquality_main }}"
        regexp: '^\s*maxrepeat\s*='
        replace: '# \g<0>'

    - name: Ensure maxrepeat = 3 is defined in 50-pwrepeat.conf
      copy:
        dest: "{{ pwquality_custom }}"
        content: |
          maxrepeat = 3
        mode: '0644'

    - name: Check if authselect is used
      stat:
        path: /etc/authselect/authselect.conf
      register: authselect_conf

    - name: Get custom profile name
      shell: "grep '^profile:' /etc/authselect/authselect.conf | awk '{print $2}'"
      register: custom_profile
      when: authselect_conf.stat.exists
      changed_when: false

    - name: Remove maxrepeat from pam_pwquality.so lines in PAM files
      lineinfile:
        path: "/etc/authselect/{{ custom_profile.stdout }}/{{ item }}"
        regexp: '^(.*pam_pwquality\.so.*)(\s+maxrepeat=\d+)(.*)$'
        line: '\1 \3'
        backrefs: yes
      loop: "{{ pam_files }}"
      when: authselect_conf.stat.exists

    - name: Apply authselect changes
      command: authselect apply-changes
      when: authselect_conf.stat.exists

    - name: Reminder to reboot
      debug:
        msg: "Manual reboot is recommended after this change to ensure full enforcement."
